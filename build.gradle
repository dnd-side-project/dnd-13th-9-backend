plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.example'
version = '0.0.1'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation("com.google.guava:guava:33.4.8-jre")
	implementation("io.jsonwebtoken:jjwt-api:0.12.6")
	runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.6")
	runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.6")

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	testAnnotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	testAnnotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	testAnnotationProcessor 'jakarta.persistence:jakarta.persistence-api'

	// Swagger
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0"
}

spotless {
	java {
		googleJavaFormat('1.19.2')

		importOrder(
				'java|javax|jakarta',
				'org.springframework',
				'lombok',
				'',
				'org.junit|org.mockito',
				'\\#',
				'\\#org.junit'
				)


		formatAnnotations()

		removeUnusedImports()

		trimTrailingWhitespace()

		endWithNewline()

		target 'src/**/*.java'
	}

	groovyGradle {
		target '*.gradle'
		greclipse()
	}
}

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile


tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory.set(querydslDir)
}

sourceSets {
	main.java.srcDirs += [querydslDir]
}

clean {
	delete file(querydslDir)
}

tasks.named('test') {
	useJUnitPlatform()
}
